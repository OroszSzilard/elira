/**
 * Seed Categories Script
 * Adds default categories to Firestore
 */

const admin = require('firebase-admin');
const serviceAccount = require('../elira-67ab7-firebase-adminsdk-w44uk-e80a8fc03d.json');

// Initialize Firebase Admin
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
}

const db = admin.firestore();

const categories = [
  {
    name: '√úzleti √©s Menedzsment',
    slug: 'uzleti-es-menedzsment',
    description: '√úzleti vezet√©s, strat√©gia, projektmenedzsment',
    icon: 'üíº',
    order: 1,
    active: true
  },
  {
    name: 'Marketing √©s √ârt√©kes√≠t√©s',
    slug: 'marketing-es-ertekesites',
    description: 'Digit√°lis marketing, k√∂z√∂ss√©gi m√©dia, √©rt√©kes√≠t√©si technik√°k',
    icon: 'üìà',
    order: 2,
    active: true
  },
  {
    name: 'Programoz√°s √©s Fejleszt√©s',
    slug: 'programozas-es-fejlesztes',
    description: 'Webfejleszt√©s, mobilappok, szoftverfejleszt√©s',
    icon: 'üíª',
    order: 3,
    active: true
  },
  {
    name: 'Design √©s Kreativit√°s',
    slug: 'design-es-kreativitas',
    description: 'Grafikai tervez√©s, UX/UI, kreat√≠v alkot√°s',
    icon: 'üé®',
    order: 4,
    active: true
  },
  {
    name: 'Szem√©lyes Fejl≈ëd√©s',
    slug: 'szemelyes-fejlodes',
    description: '√ñnismeret, kommunik√°ci√≥, produktivit√°s',
    icon: 'üå±',
    order: 5,
    active: true
  },
  {
    name: 'P√©nz√ºgyek √©s Befektet√©s',
    slug: 'penzugyek-es-befektetes',
    description: 'Befektet√©s, vagyonkezel√©s, p√©nz√ºgyi tervez√©s',
    icon: 'üí∞',
    order: 6,
    active: true
  },
  {
    name: 'Eg√©szs√©g √©s Wellness',
    slug: 'egeszseg-es-wellness',
    description: 'Fitness, t√°pl√°lkoz√°s, ment√°lis eg√©szs√©g',
    icon: 'üí™',
    order: 7,
    active: true
  },
  {
    name: 'Nyelvek',
    slug: 'nyelvek',
    description: 'Nyelvtanul√°s, kommunik√°ci√≥ idegen nyelveken',
    icon: 'üåç',
    order: 8,
    active: true
  },
  {
    name: 'Jog √©s Compliance',
    slug: 'jog-es-compliance',
    description: 'Jogszab√°lyok, adatv√©delem, megfelel≈ës√©g',
    icon: '‚öñÔ∏è',
    order: 9,
    active: true
  },
  {
    name: 'Data Science √©s AI',
    slug: 'data-science-es-ai',
    description: 'Adatelemz√©s, g√©pi tanul√°s, mesters√©ges intelligencia',
    icon: 'ü§ñ',
    order: 10,
    active: true
  },
  {
    name: 'HR √©s Toborz√°s',
    slug: 'hr-es-toborzas',
    description: 'Emberi er≈ëforr√°s menedzsment, toborz√°s, onboarding',
    icon: 'üë•',
    order: 11,
    active: true
  },
  {
    name: 'Fot√≥z√°s √©s Vide√≥z√°s',
    slug: 'fotozas-es-videozas',
    description: 'Fotogr√°fia, vide√≥k√©sz√≠t√©s, v√°g√°s',
    icon: 'üì∏',
    order: 12,
    active: true
  }
];

async function seedCategories() {
  console.log('üå± Starting category seeding...');

  try {
    // Check if categories already exist
    const existingCategories = await db.collection('categories').get();

    if (existingCategories.size > 0) {
      console.log(`‚ö†Ô∏è  Found ${existingCategories.size} existing categories`);
      console.log('   Do you want to continue? This will add duplicates if categories with same names exist.');
      console.log('   Press Ctrl+C to cancel or wait 5 seconds to continue...');

      await new Promise(resolve => setTimeout(resolve, 5000));
    }

    // Add categories
    for (const category of categories) {
      // Check if category with this slug already exists
      const existing = await db.collection('categories')
        .where('slug', '==', category.slug)
        .limit(1)
        .get();

      if (!existing.empty) {
        console.log(`‚è≠Ô∏è  Skipping "${category.name}" - already exists`);
        continue;
      }

      const docRef = await db.collection('categories').add({
        ...category,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      });

      console.log(`‚úÖ Added: ${category.name} (${docRef.id})`);
    }

    console.log('\nüéâ Category seeding completed!');
    console.log(`üìä Total categories in database: ${(await db.collection('categories').get()).size}`);

  } catch (error) {
    console.error('‚ùå Error seeding categories:', error);
    process.exit(1);
  }

  process.exit(0);
}

seedCategories();
