rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Course videos and assets - including lessons subfolder
    match /courses/{courseId}/{allPaths=**} {
      // Anyone can read course content (videos, thumbnails, etc.)
      allow read: if true;
      
      // Only admins can upload/modify in development
      // TODO: In production, also allow instructors and university admins
      allow write: if request.auth != null && isAdmin();
      
      // Limit file sizes - 500MB for videos as specified in component
      allow create: if request.auth != null && 
        isAdmin() &&
        request.resource.size < 524288000; // 500MB limit
    }
    
    // User profile pictures
    match /users/{userId}/profile/{fileName} {
      allow read: if true;
      // Users can only upload their own profile pictures
      allow write: if request.auth != null && request.auth.uid == userId
        && request.resource.size < 5242880; // 5MB limit
    }
    
    // Temporary uploads (for processing)
    match /temp/{userId}/{fileName} {
      // Users can only access their own temp files
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId
        && request.resource.size < 2147483648; // 2GB limit
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

// Helper function to check if user is admin
function isAdmin() {
  // In development with emulators, we check the user role from Firestore
  // Since we can't access Firestore directly from Storage rules,
  // we'll use a simple check for the admin email for development
  return request.auth.token.email == 'admin@elira.hu' || 
         request.auth.token.role == 'admin' || 
         request.auth.token.role == 'super_admin';
}